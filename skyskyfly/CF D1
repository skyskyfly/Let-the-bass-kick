#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
#include <cstdio>
#include <cstring>
#include <map>
using namespace std;
const int maxn=1000+10;
struct nod
{
    int need;
    int have;
    double t;
};
nod g[maxn];
int a[maxn];
bool cmp(nod x,nod y)
{
    return x.t<y.t;
}
int main()
{
    int n,k,i;
    while(~scanf("%d%d",&n,&k))
    {
        for(i=1;i<=n;i++)
        scanf("%d",&g[i].need);
        for(i=1;i<=n;i++)
        {
        scanf("%d",&g[i].have);
        g[i].t=g[i].have*1.0/g[i].need*1.0;
        }
        sort(g+1,g+n+1,cmp);
        int r=(int)g[1].t;
       // cout<<r<<endl;
        int sum=r;
        //for(int i=1;i<=n;i++)
            //cout<<g[i].have<<" ";
        //cout<<endl;
        for(i=1;i<=n;i++)
        {
            a[i]=g[i].have-r*g[i].need;
           // cout<<a[i]<<" ";
        }
       // cout<<endl;
        while(k>0)
        {
        for(i=1;i<=n;i++)
        {
            if(a[i]<g[i].need)
            {
                int m=g[i].need-a[i];
                if(k>=m)
                {
                    k-=m;
                    a[i]+=m;
                }
                else
                {
                    k==0;
                    break;
                }
            }
        }
        if(i==n+1)
        {
            for(int j=1;j<=n;j++)
            {
                a[j]-=g[j].need;
            }
            sum++;
        }
        else break;
        }
        cout<<sum<<endl;
    }
    return 0;
}
